/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 * OpenAPI spec version: 1.0.6
 */
import { rest } from 'msw'
import { faker } from '@faker-js/faker'

export const getPlaceOrderMock = () => ({
  id: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  petId: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  quantity: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  shipDate: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(['placed', 'approved', 'delivered']),
    undefined,
  ]),
  complete: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
})

export const getGetOrderByIdMock = () => ({
  id: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  petId: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  quantity: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  shipDate: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(['placed', 'approved', 'delivered']),
    undefined,
  ]),
  complete: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
})

export const getGetInventoryMock = () => ({
  cllw3ntsb0000yt1ifrhq3kk4: faker.datatype.number({
    min: undefined,
    max: undefined,
  }),
})

export const getStoreMSW = () => [
  rest.post('*/store/order', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getPlaceOrderMock()),
    )
  }),
  rest.get('*/store/order/:orderId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGetOrderByIdMock()),
    )
  }),
  rest.delete('*/store/order/:orderId', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
  rest.get('*/store/inventory', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGetInventoryMock()),
    )
  }),
]
