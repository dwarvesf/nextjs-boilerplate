/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 * OpenAPI spec version: 1.0.6
 */
import useSwr from 'swr'
import type { SWRConfiguration, Key } from 'swr'
import type {
  ApiResponse,
  UploadFileBody,
  PetBody,
  Pet,
  FindPetsByStatusParams,
  FindPetsByTagsParams,
  UpdatePetWithFormBody,
} from '../model'
import { requester } from '../mutator/requester'

/**
 * @summary uploads an image
 */
export const uploadFile = (petId: number, uploadFileBody: UploadFileBody) => {
  const formData = new FormData()
  if (uploadFileBody.additionalMetadata !== undefined) {
    formData.append('additionalMetadata', uploadFileBody.additionalMetadata)
  }
  if (uploadFileBody.file !== undefined) {
    formData.append('file', uploadFileBody.file)
  }

  return requester<ApiResponse>({
    url: `/pet/${petId}/uploadImage`,
    method: 'post',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
  })
}

/**
 * @summary Add a new pet to the store
 */
export const addPet = (petBody: PetBody) => {
  return requester<unknown>({
    url: `/pet`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: petBody,
  })
}

/**
 * @summary Update an existing pet
 */
export const updatePet = (petBody: PetBody) => {
  return requester<unknown>({
    url: `/pet`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: petBody,
  })
}

/**
 * Multiple status values can be provided with comma separated strings
 * @summary Finds Pets by status
 */
export const findPetsByStatus = (params: FindPetsByStatusParams) => {
  return requester<Pet[]>({ url: `/pet/findByStatus`, method: 'get', params })
}

export const getFindPetsByStatusKey = (params: FindPetsByStatusParams) =>
  [`/pet/findByStatus`, ...(params ? [params] : [])] as const

export type FindPetsByStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof findPetsByStatus>>
>
export type FindPetsByStatusQueryError = void

/**
 * @summary Finds Pets by status
 */
export const useFindPetsByStatus = <TError = void>(
  params: FindPetsByStatusParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof findPetsByStatus>>,
      TError
    > & { swrKey?: Key; enabled?: boolean }
  },
) => {
  const { swr: swrOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getFindPetsByStatusKey(params) : null))
  const swrFn = () => findPetsByStatus(params)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  )

  return {
    swrKey,
    ...query,
  }
}

/**
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @deprecated
 * @summary Finds Pets by tags
 */
export const findPetsByTags = (params: FindPetsByTagsParams) => {
  return requester<Pet[]>({ url: `/pet/findByTags`, method: 'get', params })
}

export const getFindPetsByTagsKey = (params: FindPetsByTagsParams) =>
  [`/pet/findByTags`, ...(params ? [params] : [])] as const

export type FindPetsByTagsQueryResult = NonNullable<
  Awaited<ReturnType<typeof findPetsByTags>>
>
export type FindPetsByTagsQueryError = void

/**
 * @deprecated
 * @summary Finds Pets by tags
 */
export const useFindPetsByTags = <TError = void>(
  params: FindPetsByTagsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof findPetsByTags>>,
      TError
    > & { swrKey?: Key; enabled?: boolean }
  },
) => {
  const { swr: swrOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getFindPetsByTagsKey(params) : null))
  const swrFn = () => findPetsByTags(params)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  )

  return {
    swrKey,
    ...query,
  }
}

/**
 * Returns a single pet
 * @summary Find pet by ID
 */
export const getPetById = (petId: number) => {
  return requester<Pet>({ url: `/pet/${petId}`, method: 'get' })
}

export const getGetPetByIdKey = (petId: number) => [`/pet/${petId}`] as const

export type GetPetByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPetById>>
>
export type GetPetByIdQueryError = void

/**
 * @summary Find pet by ID
 */
export const useGetPetById = <TError = void>(
  petId: number,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getPetById>>, TError> & {
      swrKey?: Key
      enabled?: boolean
    }
  },
) => {
  const { swr: swrOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!petId
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetPetByIdKey(petId) : null))
  const swrFn = () => getPetById(petId)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  )

  return {
    swrKey,
    ...query,
  }
}

/**
 * @summary Updates a pet in the store with form data
 */
export const updatePetWithForm = (
  petId: number,
  updatePetWithFormBody: UpdatePetWithFormBody,
) => {
  const formUrlEncoded = new URLSearchParams()
  if (updatePetWithFormBody.name !== undefined) {
    formUrlEncoded.append('name', updatePetWithFormBody.name)
  }
  if (updatePetWithFormBody.status !== undefined) {
    formUrlEncoded.append('status', updatePetWithFormBody.status)
  }

  return requester<unknown>({
    url: `/pet/${petId}`,
    method: 'post',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    data: formUrlEncoded,
  })
}

/**
 * @summary Deletes a pet
 */
export const deletePet = (petId: number) => {
  return requester<unknown>({ url: `/pet/${petId}`, method: 'delete' })
}
