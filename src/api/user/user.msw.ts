/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 * OpenAPI spec version: 1.0.6
 */
import { rest } from 'msw'
import { faker } from '@faker-js/faker'

export const getGetUserByNameMock = () => ({
  id: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
  username: faker.helpers.arrayElement([faker.random.word(), undefined]),
  firstName: faker.helpers.arrayElement([faker.random.word(), undefined]),
  lastName: faker.helpers.arrayElement([faker.random.word(), undefined]),
  email: faker.helpers.arrayElement([faker.random.word(), undefined]),
  password: faker.helpers.arrayElement([faker.random.word(), undefined]),
  phone: faker.helpers.arrayElement([faker.random.word(), undefined]),
  userStatus: faker.helpers.arrayElement([
    faker.datatype.number({ min: undefined, max: undefined }),
    undefined,
  ]),
})

export const getLoginUserMock = () => faker.random.word()

export const getUserMSW = () => [
  rest.post('*/user/createWithArray', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
  rest.post('*/user/createWithList', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
  rest.get('*/user/:username', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGetUserByNameMock()),
    )
  }),
  rest.put('*/user/:username', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
  rest.delete('*/user/:username', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
  rest.get('*/user/login', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getLoginUserMock()),
    )
  }),
  rest.get('*/user/logout', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
  rest.post('*/user', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
]
