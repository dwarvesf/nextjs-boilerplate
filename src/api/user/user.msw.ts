/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * Swagger API
 * This is a swagger for API.
 * OpenAPI spec version: 1.0
 */
import { rest } from 'msw'
import { faker } from '@faker-js/faker'

export const getGetMeMock = () => ({
  data: faker.helpers.arrayElement([
    {
      avatar: (() => faker.image.avatar())(),
      department: faker.random.word(),
      email: (() => faker.internet.email())(),
      fullName: faker.random.word(),
      id: faker.datatype.number({ min: undefined, max: undefined }),
      role: faker.random.word(),
      status: faker.random.word(),
      title: faker.random.word(),
    },
    undefined,
  ]),
})

export const getGetUsersListMock = () => ({
  data: faker.helpers.arrayElement([
    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      avatar: (() => faker.image.avatar())(),
      department: faker.random.word(),
      email: (() => faker.internet.email())(),
      fullName: faker.random.word(),
      id: faker.datatype.number({ min: undefined, max: undefined }),
      role: faker.random.word(),
      status: faker.random.word(),
      title: faker.random.word(),
    })),
    undefined,
  ]),
  metadata: faker.helpers.arrayElement([
    {
      hasNext: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      page: faker.datatype.number({ min: undefined, max: undefined }),
      pageSize: faker.datatype.number({ min: undefined, max: undefined }),
      sort: faker.helpers.arrayElement([faker.random.word(), undefined]),
      totalPages: faker.datatype.number({ min: undefined, max: undefined }),
      totalRecords: faker.datatype.number({ min: undefined, max: undefined }),
    },
    undefined,
  ]),
})

export const getUpdateUserMock = () => ({
  data: faker.helpers.arrayElement([
    {
      avatar: (() => faker.image.avatar())(),
      department: faker.random.word(),
      email: (() => faker.internet.email())(),
      fullName: faker.random.word(),
      id: faker.datatype.number({ min: undefined, max: undefined }),
      role: faker.random.word(),
      status: faker.random.word(),
      title: faker.random.word(),
    },
    undefined,
  ]),
})

export const getUpdatePasswordMock = () => ({
  data: faker.helpers.arrayElement([
    { message: faker.random.word() },
    undefined,
  ]),
})

export const getUserMSW = () => [
  rest.get('*/portal/me', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGetMeMock()),
    )
  }),
  rest.get('*/portal/users', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGetUsersListMock()),
    )
  }),
  rest.put('*/portal/users', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getUpdateUserMock()),
    )
  }),
  rest.put('*/portal/users/password', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getUpdatePasswordMock()),
    )
  }),
]
