/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * Swagger API
 * This is a swagger for API.
 * OpenAPI spec version: 1.0
 */
import useSwr from 'swr'
import type { SWRConfiguration, Key } from 'swr'
import type {
  MeResponse,
  ErrorResponse,
  UsersListResponse,
  GetUsersListParams,
  UserResponse,
  UpdateUserRequest,
  MessageResponse,
  UpdatePasswordRequest,
} from '../model'
import { requester } from '../mutator/requester'

/**
 * Retrieve my information
 * @summary Retrieve my information
 */
export const getMe = () => {
  return requester<MeResponse>({ url: `/portal/me`, method: 'get' })
}

export const getGetMeKey = () => [`/portal/me`] as const

export type GetMeQueryResult = NonNullable<Awaited<ReturnType<typeof getMe>>>
export type GetMeQueryError = ErrorResponse

/**
 * @summary Retrieve my information
 */
export const useGetMe = <TError = ErrorResponse>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getMe>>, TError> & {
    swrKey?: Key
    enabled?: boolean
  }
}) => {
  const { swr: swrOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetMeKey() : null))
  const swrFn = () => getMe()

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  )

  return {
    swrKey,
    ...query,
  }
}

/**
 * get users list
 * @summary Get users list
 */
export const getUsersList = (params?: GetUsersListParams) => {
  return requester<UsersListResponse>({
    url: `/portal/users`,
    method: 'get',
    params,
  })
}

export const getGetUsersListKey = (params?: GetUsersListParams) =>
  [`/portal/users`, ...(params ? [params] : [])] as const

export type GetUsersListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersList>>
>
export type GetUsersListQueryError = ErrorResponse

/**
 * @summary Get users list
 */
export const useGetUsersList = <TError = ErrorResponse>(
  params?: GetUsersListParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getUsersList>>, TError> & {
      swrKey?: Key
      enabled?: boolean
    }
  },
) => {
  const { swr: swrOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetUsersListKey(params) : null))
  const swrFn = () => getUsersList(params)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  )

  return {
    swrKey,
    ...query,
  }
}

/**
 * Update user
 * @summary Update user
 */
export const updateUser = (updateUserRequest: UpdateUserRequest) => {
  return requester<UserResponse>({
    url: `/portal/users`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: updateUserRequest,
  })
}

/**
 * Update user's password
 * @summary Update user's password
 */
export const updatePassword = (
  updatePasswordRequest: UpdatePasswordRequest,
) => {
  return requester<MessageResponse>({
    url: `/portal/users/password`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: updatePasswordRequest,
  })
}
