/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 * OpenAPI spec version: 1.0.6
 */
import useSwr from 'swr'
import type { SWRConfiguration, Key } from 'swr'
import type { UserArrayBody, User, LoginUserParams } from '../model'
import { requester } from '../mutator/requester'

/**
 * @summary Creates list of users with given input array
 */
export const createUsersWithArrayInput = (userArrayBody: UserArrayBody) => {
  return requester<void>({
    url: `/user/createWithArray`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: userArrayBody,
  })
}

/**
 * @summary Creates list of users with given input array
 */
export const createUsersWithListInput = (userArrayBody: UserArrayBody) => {
  return requester<void>({
    url: `/user/createWithList`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: userArrayBody,
  })
}

/**
 * @summary Get user by user name
 */
export const getUserByName = (username: string) => {
  return requester<User>({ url: `/user/${username}`, method: 'get' })
}

export const getGetUserByNameKey = (username: string) =>
  [`/user/${username}`] as const

export type GetUserByNameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserByName>>
>
export type GetUserByNameQueryError = void

/**
 * @summary Get user by user name
 */
export const useGetUserByName = <TError = void>(
  username: string,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getUserByName>>,
      TError
    > & { swrKey?: Key; enabled?: boolean }
  },
) => {
  const { swr: swrOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!username
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetUserByNameKey(username) : null))
  const swrFn = () => getUserByName(username)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  )

  return {
    swrKey,
    ...query,
  }
}

/**
 * This can only be done by the logged in user.
 * @summary Updated user
 */
export const updateUser = (username: string, user: User) => {
  return requester<unknown>({
    url: `/user/${username}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: user,
  })
}

/**
 * This can only be done by the logged in user.
 * @summary Delete user
 */
export const deleteUser = (username: string) => {
  return requester<unknown>({ url: `/user/${username}`, method: 'delete' })
}

/**
 * @summary Logs user into the system
 */
export const loginUser = (params: LoginUserParams) => {
  return requester<string>({ url: `/user/login`, method: 'get', params })
}

export const getLoginUserKey = (params: LoginUserParams) =>
  [`/user/login`, ...(params ? [params] : [])] as const

export type LoginUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof loginUser>>
>
export type LoginUserQueryError = void

/**
 * @summary Logs user into the system
 */
export const useLoginUser = <TError = void>(
  params: LoginUserParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof loginUser>>, TError> & {
      swrKey?: Key
      enabled?: boolean
    }
  },
) => {
  const { swr: swrOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getLoginUserKey(params) : null))
  const swrFn = () => loginUser(params)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  )

  return {
    swrKey,
    ...query,
  }
}

/**
 * @summary Logs out current logged in user session
 */
export const logoutUser = () => {
  return requester<void>({ url: `/user/logout`, method: 'get' })
}

export const getLogoutUserKey = () => [`/user/logout`] as const

export type LogoutUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof logoutUser>>
>
export type LogoutUserQueryError = void

/**
 * @summary Logs out current logged in user session
 */
export const useLogoutUser = <TError = void>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof logoutUser>>, TError> & {
    swrKey?: Key
    enabled?: boolean
  }
}) => {
  const { swr: swrOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getLogoutUserKey() : null))
  const swrFn = () => logoutUser()

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  )

  return {
    swrKey,
    ...query,
  }
}

/**
 * This can only be done by the logged in user.
 * @summary Create user
 */
export const createUser = (user: User) => {
  return requester<void>({
    url: `/user`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: user,
  })
}
